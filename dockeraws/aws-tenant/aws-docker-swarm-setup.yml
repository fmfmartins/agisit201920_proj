---
# file: aws-docker-swarm-setup.yml

- hosts: targets
  gather_facts: yes
  remote_user: ec2-user
  become: yes
  become_method: sudo

  tasks:
    - name: start docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: copy daemon json to docker
      copy:
        src: /home/vagrant/aws-tenant/templates/daemon.json
        dest: /etc/docker
      notify: restart docker

  handlers:
    - name: restart docker
      service:
        name: docker
        state: restarted

- hosts: manager
  gather_facts: yes
  remote_user: ec2-user

  tasks:
    - name: init docker swarm
      docker_swarm:
        advertise_addr: "{{ ansible_default_ipv4.address | default(ansible_all_ipv4_addresses[0]) }}"
        state: present
      register: swarm_result

- hosts: workers
  gather_facts: yes
  remote_user: ec2-user
  vars:
    token: "{{ hostvars['manager']['swarm_result']['swarm_facts']['JoinTokens']['Worker'] }}"
    advertise_addr: "{{ hostvars['manager'].ansible_default_ipv4.address | default(hostvars['manager'].ansible_all_ipv4_addresses[0]) }}"

  tasks:
    - name: join docker swarm
      docker_swarm:
        advertise_addr: "{{ advertise_addr }}"
        listen_addr: "{{ advertise_addr }}:2377"
        join_token: "{{ token }}"
        remote_addrs: [ "{{ advertise_addr }}:2377" ]
        state: join

- hosts: manager
  gather_facts: yes
  remote_user: ec2-user

  tasks:
    - name: deploy prometheus configuration
      copy:
        src: /home/vagrant/aws-tenant/templates/prometheus.yml
        dest: /tmp/
      notify: restart docker

    - name: start prometheus container
      docker_container:
        name: prometheus
        image: prom/prometheus
        volumes: /tmp/prometheus.yml:/etc/prometheus/prometheus.yml
        network_mode: host
        restart_policy: "unless-stopped"
        state: started

    - name: start grafana container
      docker_container:
        name: grafana
        image: grafana/grafana
        ports:
          - "3000:3000"
        restart_policy: "unless-stopped"
        state: started

    - name: start node-exporter service
      docker_swarm_service:
        name: node-exporter
        image: prom/node-exporter
        mode: global
        publish:
          - published_port: 9100
            target_port: 9100
            mode: host
        endpoint_mode: dnsrr
        state: present

    - name: start cadvisor service
      docker_swarm_service:
        name: cadvisor
        image: google/cadvisor:latest
        mode: global
        publish:
          - published_port: 8080
            target_port: 8080
            mode: host
        endpoint_mode: dnsrr
        state: present
        mounts:
          - source: /var/lib/docker/
            target: /var/lib/docker:ro
            type: bind
          - source: /var/run
            target: /var/run:rw
            type: bind
          - source: /sys
            target: /sys:ro
            type: bind
          - source: /
            target: /rootfs:ro
            type: bind

    - name: launch nginx webserver
      docker_swarm_service:
        name: web
        image: varonynt/hello-swarm:1.0
        replicas: 3
        publish:
          - published_port: 80
            target_port: 80
        state: present

  handlers:
    - name: restart docker
      become: yes
      become_method: sudo
      service:
        name: docker
        state: restarted

